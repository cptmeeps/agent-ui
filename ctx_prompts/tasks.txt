# AI Agent UI - Milestones and Task Breakdown

1. **Project Setup**
  1.1 Initialize repository.
    - Success Criteria 
      - A new repository is created and accessible.
      - The repository contains a README file with project overview.
      - Initial commit is made with a basic project structure.
      - Repository is configured for version control (e.g., .gitignore file).   
    - Step by Step Instructions
      1. Create a new repository on GitHub (or your preferred platform).
        - Go to GitHub.
        - Click on "New" to create a new repository.
        - Enter repository name, description, and set visibility (public/private).
        - Click "Create repository".
      2. Clone the repository to your local machine.
        - Open terminal.
        - Run `git clone <repository_url>`.
      3. Navigate to the cloned repository directory.
        - Run `cd <repository_name>`.
      4. Create a README file.
        - Run `touch README.md`.
        - Open `README.md` in a text editor.
        - Add project overview and save the file.
      5. Create a basic project structure.
        - Run `mkdir backend frontend`.
        - Run `touch backend/__init__.py frontend/index.html`.
      6. Set up version control configuration.
        - Run `touch .gitignore`.
        - Open `.gitignore` in a text editor.
        - Add common ignores (e.g., `__pycache__/`, `node_modules/`, `.env`).
      7. Make the initial commit.
        - Run `git add .`.
        - Run `git commit -m "Initial project setup with basic structure"`.
      8. Push the changes to the remote repository.
        - Run `git push origin main`.
  1.2 Set up Flask backend and React frontend.
    - Success Criteria
      - Flask backend is initialized and can run a basic server.
      - React frontend is initialized and can display a basic page.
      - Both backend and frontend are organized in their respective directories.
      - Initial commit is made with the setup for both backend and frontend.
    - Step by Step Instructions
      **Flask Backend Setup:**
      1. Navigate to the backend directory.
         - Run `cd backend`.
      2. Create a virtual environment.
         - Run `python -m venv venv`.
      3. Activate the virtual environment.
         - On Windows: `venv\Scripts\activate`
         - On macOS/Linux: `source venv/bin/activate`
      4. Install Flask.
         - Run `pip install Flask`.
      5. Create a basic Flask app.
         - Run `touch app.py`.
         - Add the following code to `app.py`:
           ```python
           from flask import Flask

           app = Flask(__name__)

           @app.route('/')
           def home():
               return "Hello, Flask!"

           if __name__ == '__main__':
               app.run(debug=True)
           ```
      6. Test the Flask app.
         - Run `python app.py`.
         - Open a browser and navigate to `http://127.0.0.1:5000/` to see "Hello, Flask!".

      **React Frontend Setup:**
      1. Navigate to the frontend directory.
         - Run `cd ../frontend`.
      2. Initialize a new React project using Create React App.
         - Run `npx create-react-app .` (note the dot to use the current directory).
      3. Start the React development server.
         - Run `npm start`.
         - Open a browser and navigate to `http://localhost:3000/` to see the default React page.

      **Organize and Commit:**
      1. Ensure both backend and frontend directories are properly structured.
      2. Add all changes to git.
         - Run `git add .`.
      3. Commit the changes.
         - Run `git commit -m "Set up Flask backend and React frontend"`.
      4. Push the changes to the remote repository.
         - Run `git push origin main`.  
  1.3  Configure SQLite database.
    - Success Criteria
      - SQLite database is set up and integrated with the Flask backend.
      - Database schema is defined and tables are created.
      - Initial data can be inserted and retrieved from the database.
      - Database configuration is committed to the repository.
    - Step by Step Instructions
      **Configure SQLite Database:**
      1. Navigate to the backend directory.
         - Run `cd backend`.
      2. Install SQLAlchemy.
         - Run `pip install SQLAlchemy`.
      3. Create a database configuration file.
         - Run `touch config.py`.
         - Add the following code to `config.py`:
           ```python
           import os
           basedir = os.path.abspath(os.path.dirname(__file__))

           class Config:
               SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(basedir, 'app.db')
               SQLALCHEMY_TRACK_MODIFICATIONS = False
           ```
      4. Update the Flask app to use SQLAlchemy.
         - Open `app.py` and modify it as follows:
           ```python
           from flask import Flask
           from flask_sqlalchemy import SQLAlchemy
           from config import Config

           app = Flask(__name__)
           app.config.from_object(Config)
           db = SQLAlchemy(app)

           @app.route('/')
           def home():
               return "Hello, Flask with SQLite!"

           if __name__ == '__main__':
               app.run(debug=True)
           ```
      5. Define the database schema.
         - Run `touch models.py`.
         - Add the following code to `models.py`:
           ```python
           from app import db

           class UserConfiguration(db.Model):
               id = db.Column(db.Integer, primary_key=True)
               api_key = db.Column(db.String(128), unique=True, nullable=False)
               settings = db.Column(db.JSON, nullable=True)
               created_at = db.Column(db.DateTime, default=db.func.current_timestamp())
               updated_at = db.Column(db.DateTime, default=db.func.current_timestamp(), onupdate=db.func.current_timestamp())

           class APIInteractionLog(db.Model):
               id = db.Column(db.Integer, primary_key=True)
               user_id = db.Column(db.Integer, db.ForeignKey('user_configuration.id'), nullable=False)
               api_endpoint = db.Column(db.String(256), nullable=False)
               request_payload = db.Column(db.Text, nullable=False)
               response_payload = db.Column(db.Text, nullable=False)
               status = db.Column(db.String(64), nullable=False)
               created_at = db.Column(db.DateTime, default=db.func.current_timestamp())

           class FileMetadata(db.Model):
               id = db.Column(db.Integer, primary_key=True)
               user_id = db.Column(db.Integer, db.ForeignKey('user_configuration.id'), nullable=False)
               session_name = db.Column(db.String(128), nullable=False)
               file_name = db.Column(db.String(256), nullable=False)
               file_path = db.Column(db.String(512), nullable=False)
               file_type = db.Column(db.String(64), nullable=False)
               size = db.Column(db.Integer, nullable=False)
               created_at = db.Column(db.DateTime, default=db.func.current_timestamp())
               updated_at = db.Column(db.DateTime, default=db.func.current_timestamp(), onupdate=db.func.current_timestamp())
           ```
      6. Create the database and tables.
         - Open a Python shell.
         - Run the following commands:
           ```python
           from app import db
           db.create_all()
           ```
      7. Verify the database and tables are created.
         - Check for the `app.db` file in the backend directory.
         - Use a SQLite browser or command line to inspect the tables.
      **Organize and Commit:**
      1. Ensure all changes are properly structured.
      2. Add all changes to git.
         - Run `git add .`.
      3. Commit the changes.
         - Run `git commit -m "Configure SQLite database with SQLAlchemy"`.
      4. Push the changes to the remote repository.
         - Run `git push origin main`.

2. **Backend Server Development**
  - Implement local web server with Flask.
  - Create request handler module.
  - Develop API integration service.
  - Implement filesystem service.
  - Create response service.
  - Develop session manager.
  - Implement database service with SQLAlchemy.

3. **Frontend Application Development**
  - Set up React project structure.
  - Develop UI components for AI interaction.
  - Implement API client for backend communication.
  - Create file management interface.
  - Develop settings and configuration interface.
  - Implement session management interface.

4. **API Integration**
  - Implement key management.
  - Develop request formatter.
  - Implement response processor.

5. **Filesystem Interaction**
  - Develop file browser interface.
  - Implement upload/download manager.
  - Create session folder manager.

6. **Database Interaction**
  - Define ORM models (User Configuration, API Interaction Log, File Metadata).
  - Implement CRUD operations for models.
  - Set up database schema and relationships.

7. **Testing and Validation**
  - Write backend tests using pytest.
  - Write frontend tests using Jest and React Testing Library.
  - Perform integration testing.

8. **User Interface Enhancements**
  - Improve UI/UX based on feedback.
  - Add error handling and notifications.
  - Implement responsive design.

9. **Documentation and Deployment**
  - Document code and API endpoints.
  - Create user guide.
  - Set up local deployment with Docker.

10. **Prototype Review and Iteration**
  - Collect user feedback.
  - Iterate on features and fix bugs.
  - Prepare for potential production deployment.